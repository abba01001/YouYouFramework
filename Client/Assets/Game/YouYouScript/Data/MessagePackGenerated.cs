// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(4)
            {
                { typeof(global::System.Collections.Generic.Dictionary<int, int>), 0 },
                { typeof(global::System.Collections.Generic.Dictionary<string, int>), 1 },
                { typeof(global::DataManager), 2 },
                { typeof(global::PlayerRoleData), 3 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.DictionaryFormatter<int, int>();
                case 1: return new global::MessagePack.Formatters.DictionaryFormatter<string, int>();
                case 2: return new MessagePack.Formatters.DataManagerFormatter();
                case 3: return new MessagePack.Formatters.PlayerRoleDataFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    public sealed class DataManagerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DataManager>
    {
        // UserId
        private static global::System.ReadOnlySpan<byte> GetSpan_UserId() => new byte[1 + 6] { 166, 85, 115, 101, 114, 73, 100 };
        // IsFirstLoginTime
        private static global::System.ReadOnlySpan<byte> GetSpan_IsFirstLoginTime() => new byte[1 + 16] { 176, 73, 115, 70, 105, 114, 115, 116, 76, 111, 103, 105, 110, 84, 105, 109, 101 };
        // DataUpdateTime
        private static global::System.ReadOnlySpan<byte> GetSpan_DataUpdateTime() => new byte[1 + 14] { 174, 68, 97, 116, 97, 85, 112, 100, 97, 116, 101, 84, 105, 109, 101 };
        // LastRefreshTime
        private static global::System.ReadOnlySpan<byte> GetSpan_LastRefreshTime() => new byte[1 + 15] { 175, 76, 97, 115, 116, 82, 101, 102, 114, 101, 115, 104, 84, 105, 109, 101 };
        // PlayerRoleData
        private static global::System.ReadOnlySpan<byte> GetSpan_PlayerRoleData() => new byte[1 + 14] { 174, 80, 108, 97, 121, 101, 114, 82, 111, 108, 101, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::DataManager value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_UserId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.UserId, options);
            writer.WriteRaw(GetSpan_IsFirstLoginTime());
            writer.Write(value.IsFirstLoginTime);
            writer.WriteRaw(GetSpan_DataUpdateTime());
            writer.Write(value.DataUpdateTime);
            writer.WriteRaw(GetSpan_LastRefreshTime());
            writer.Write(value.LastRefreshTime);
            writer.WriteRaw(GetSpan_PlayerRoleData());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PlayerRoleData>(formatterResolver).Serialize(ref writer, value.PlayerRoleData, options);
        }

        public global::DataManager Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::DataManager();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110266614641493UL) { goto FAIL; }

                        ____result.UserId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_IsFirstLoginTime().Slice(1))) { goto FAIL; }

                        ____result.IsFirstLoginTime = reader.ReadBoolean();
                        continue;
                    case 14:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7017857631359623492UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 111520592979316UL) { goto FAIL; }

                                ____result.DataUpdateTime = reader.ReadInt32();
                                continue;

                            case 8021599666453965904UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 107152475972972UL) { goto FAIL; }

                                ____result.PlayerRoleData = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::PlayerRoleData>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_LastRefreshTime().Slice(1))) { goto FAIL; }

                        ____result.LastRefreshTime = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerRoleDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::PlayerRoleData>
    {
        // name
        private static global::System.ReadOnlySpan<byte> GetSpan_name() => new byte[1 + 4] { 164, 110, 97, 109, 101 };
        // totalOnlineDuration
        private static global::System.ReadOnlySpan<byte> GetSpan_totalOnlineDuration() => new byte[1 + 19] { 179, 116, 111, 116, 97, 108, 79, 110, 108, 105, 110, 101, 68, 117, 114, 97, 116, 105, 111, 110 };
        // todayOnlineDuration
        private static global::System.ReadOnlySpan<byte> GetSpan_todayOnlineDuration() => new byte[1 + 19] { 179, 116, 111, 100, 97, 121, 79, 110, 108, 105, 110, 101, 68, 117, 114, 97, 116, 105, 111, 110 };
        // dialogueIds
        private static global::System.ReadOnlySpan<byte> GetSpan_dialogueIds() => new byte[1 + 11] { 171, 100, 105, 97, 108, 111, 103, 117, 101, 73, 100, 115 };
        // equipInfo
        private static global::System.ReadOnlySpan<byte> GetSpan_equipInfo() => new byte[1 + 9] { 169, 101, 113, 117, 105, 112, 73, 110, 102, 111 };
        // bagWareHouse
        private static global::System.ReadOnlySpan<byte> GetSpan_bagWareHouse() => new byte[1 + 12] { 172, 98, 97, 103, 87, 97, 114, 101, 72, 111, 117, 115, 101 };
        // equipWareHouse
        private static global::System.ReadOnlySpan<byte> GetSpan_equipWareHouse() => new byte[1 + 14] { 174, 101, 113, 117, 105, 112, 87, 97, 114, 101, 72, 111, 117, 115, 101 };
        // roleAttr
        private static global::System.ReadOnlySpan<byte> GetSpan_roleAttr() => new byte[1 + 8] { 168, 114, 111, 108, 101, 65, 116, 116, 114 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::PlayerRoleData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(8);
            writer.WriteRaw(GetSpan_name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.name, options);
            writer.WriteRaw(GetSpan_totalOnlineDuration());
            writer.Write(value.totalOnlineDuration);
            writer.WriteRaw(GetSpan_todayOnlineDuration());
            writer.Write(value.todayOnlineDuration);
            writer.WriteRaw(GetSpan_dialogueIds());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>(formatterResolver).Serialize(ref writer, value.dialogueIds, options);
            writer.WriteRaw(GetSpan_equipInfo());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>(formatterResolver).Serialize(ref writer, value.equipInfo, options);
            writer.WriteRaw(GetSpan_bagWareHouse());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>(formatterResolver).Serialize(ref writer, value.bagWareHouse, options);
            writer.WriteRaw(GetSpan_equipWareHouse());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>(formatterResolver).Serialize(ref writer, value.equipWareHouse, options);
            writer.WriteRaw(GetSpan_roleAttr());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>(formatterResolver).Serialize(ref writer, value.roleAttr, options);
        }

        public global::PlayerRoleData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::PlayerRoleData();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667182UL) { goto FAIL; }

                        ____result.name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 19:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7813269730444472180UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_totalOnlineDuration().Slice(1 + 8))) { goto FAIL; }

                                ____result.totalOnlineDuration = reader.ReadInt32();
                                continue;

                            case 7813269786277998452UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_todayOnlineDuration().Slice(1 + 8))) { goto FAIL; }

                                ____result.todayOnlineDuration = reader.ReadInt32();
                                continue;

                        }
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_dialogueIds().Slice(1))) { goto FAIL; }

                        ____result.dialogueIds = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_equipInfo().Slice(1))) { goto FAIL; }

                        ____result.equipInfo = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_bagWareHouse().Slice(1))) { goto FAIL; }

                        ____result.bagWareHouse = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_equipWareHouse().Slice(1))) { goto FAIL; }

                        ____result.equipWareHouse = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8247344641845522290UL) { goto FAIL; }

                        ____result.roleAttr = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

